<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jar包的使用</title>
    <url>/2021/11/09/Jar%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1>Jar的使用</h1>
<h2 id="中文摘要">中文摘要</h2>
<p><strong>什么是jar包？</strong></p>
<p>JAR文件的全称是Java Archive File，意思是Java档案文件。是一种压缩文件，与常见的ZIP压缩文件兼容。两者最大的区别是在JAR文件中默认包含一个名为META-INF/MANIFEST.MF的清单文件，这个文件是生成JAR文件时由系统自动创建的。</p>
<p><strong>使用jar包的好处</strong></p>
<ul>
<li>安全，可以对其进行数字签名，只让能够识别数字签名的用户使用里面的东西。</li>
<li>加快下载速度；</li>
<li>压缩，使文件变小，与ZIP压缩机制完全相同。</li>
<li>包封装。能够让JAR包里面的文件依赖于统一版本的类文件。</li>
<li>可移植性，能够在各种平台上直接使用。</li>
<li>把一个JAR文件添加到系统的classpath环境变量之后，java通常会把这个JAR文件当做一个路径来处理。通常使用jar命令来压缩，</li>
<li>以把一个或多个路径全部压缩成一个JAR文件。</li>
</ul>
<p><strong>什么情况下使用jar包？</strong></p>
<p>当开发一个应用程序后这个应用程序包含了很多类，如果需要把这个程序提供给别人使用，通常会将这些类文件打包成一个JAR文件，把这个文件提供给别人使用。只要在别人系统的CLASSPATH环境变量中添加这个文件，则java虚拟机就可以自动在内存中解压这个jar包。</p>
<h2 id="前言">前言</h2>
<h3 id="目的">目的</h3>
<ol>
<li>学会打包java程序，将编译后的java文件打包成jar。</li>
<li>加深对java中包的理解。</li>
</ol>
<h3 id="内容概述">内容概述</h3>
<ol>
<li>将java源文件编译后，使用<code>jar</code>命令后打包成jar程序。</li>
<li>通过命令行运行jar程序。</li>
</ol>
<h2 id="软件环境">软件环境</h2>
<ul>
<li>操作系统： Window10</li>
<li>JDK版本：   java11</li>
</ul>
<h2 id="内容">内容</h2>
<p><strong>打包有目录的java程序</strong></p>
<ol>
<li>新建一个 .java 文件, 如图：创建了test.java文件(主类)，其中包含com文件夹下的PersonAddress类<br>
<img src="https://img10.360buyimg.com/ddimg/jfs/t1/223004/1/480/25468/617bb5cbEcf12ca21/92b9ef81857a3921.png" alt="image.png"></li>
</ol>
<p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/137587/21/23337/27767/617bb60aE3600b3ca/8af1d2e7c72997b5.png" alt="image.png"></p>
<ol start="2">
<li>
<p>通过命令行的方式编译文件。<strong>注意，需要先编译得到.class文件才能进行打包</strong><br>
输入命令<code>javac test.java</code><br>
需要预先配置好[java环境](<a href="https://gitee.com/looliby/home-work/blob/master/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md">实验报告/java环境配置.md · looliby/HomeWork - 码云 - 开源中国 (gitee.com)</a>)<br>
编译完成后，可以看到文件夹中生成了test.class文件。</p>
</li>
<li>
<p>打包java程序。<br>
这个时候我们需要先准备MEFINEST.MF文件，该文件用于描述Jar包的信息，此处只要描述Main-Class即可</p>
<pre class="line-numbers language-none"><code class="language-none">1 Manifest-Version: 1.0
2 Created-By: java11
3 Main-Class: test
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre><code>事先准备好上述的MENIFEST.MF文件，并存放在META-INF文件夹下，此时打jar包的命令如下
</code></pre>
<p><code>jar -cvfm test.jar META-INF\MENIFEST.MF test.class com</code></p>
<ul>
<li>
<p>test.jar是打包后的程序名</p>
</li>
<li>
<p>-cvfm表示自定义清单文件</p>
</li>
<li>
<p>com表示打包com文件夹下的所有程序<br>
运行过程如下：</p>
<p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/196852/2/15071/28647/617be2f1E49cb182d/3236cfe927272f94.png" alt="image.png"></p>
</li>
</ul>
</li>
<li>
<p>运行打包后的jar<br>
<code>java -jar test.jar</code><br>
运行结果如下：<br>
<img src="https://img10.360buyimg.com/ddimg/jfs/t1/210370/17/7264/31644/617be31eE606591db/97baf3a738d121d4.png" alt="image.png"></p>
</li>
<li>
<p>使用<code>jar -tf test.jar</code>可以查看jar包中包含文件，样例中包含文件如下</p>
<pre class="line-numbers language-none"><code class="language-none">META-INF&#x2F;
META-INF&#x2F;MANIFEST.MF
test.class
com&#x2F;
com&#x2F;PersonAddress.class
com&#x2F;PersonAddress.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p><strong>制作含有jar文件的jar包</strong></p>
<ol>
<li>
<p>编写一个Beer.java类并将其编译成Beer.class, 并生成jar包</p>
<pre class="line-numbers language-none"><code class="language-none">javac com&#x2F;Beer.java
jar -cvf Beer.jar com&#x2F;Beer.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>test类中调用了Beer类，此时Beer类已经打包，这个时候需要在打jar包时使用 -cp 参数，将Beer.jar包引入<br>
<code>javac -cp Beer.jar test.java</code><br>
这里的 -cp 表示 -classpath, 指的是把Beer.jar加入classpath路径下</p>
</li>
<li>
<p>把生成的test.class打成jar包</p>
<pre class="line-numbers language-none"><code class="language-none">jar -cvfm test.jar META-INF\MANIFEST.MF test.class Beer.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里的MANIFEST.MF与之前大致相同，但由于引入了jar包，需要在MENIFEST.MF文件中配置一个新属性，路径指向所需要的所有jar包，如图：</p>
<pre class="line-numbers language-none"><code class="language-none">1 Manifest-Version: 1.0
2 Created-By: java11
3 Main-Class: test
4 Class-Path: Beer.jar
5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：文件末尾要有空白行</strong></p>
</li>
<li>
<p>最后运行jar包<br>
<code>java -jar test.jar</code><br>
<img src="https://img14.360buyimg.com/ddimg/jfs/t1/197863/33/15302/26523/617be8a7E9119f8d2/88690bf3f06fa99f.png" alt="image.png"></p>
</li>
</ol>
<h4 id="jar常见命令">jar常见命令</h4>
<ul>
<li><code>jar cf test.jar test</code>  不显示压缩过程将当前路径下的test路径下的全部内容生成一个test.jar文件，如果已经存在则被覆盖。</li>
<li><code>jar cvf test.jar test</code> 显示压缩过程；</li>
<li><code>jar cvfM test.jar test</code> 不生成清单文件；</li>
<li><code>jar cvfm test.jar manifest.mf test</code> 自定义清单文件信息，m指定读取用户清单信息。清单文件是普通文本文件。</li>
<li><code>jar cvfm test.jar a.txt test</code> 将清单文件中的key-value对提取到META-INF/MANIFEST.MF文件中。</li>
<li><code>jar tf test.jar</code> 查看jar包内容；</li>
<li><code>jar tf test.jar &gt; a.txt:</code> 如果jar包中的文件路径和文件非常多，用上一个命令就无法查看所有，所以用重定向将显示结果保存到文件中。</li>
<li><code>jar tvf test.jar:</code> 查看详细内容；</li>
<li><code>jar xf test.jar</code> 解压，将jar文件解压到当前目录下；</li>
<li><code>jar xvf test.jar</code> 解压，显示解压过程的信息；</li>
<li><code>jar uf test.jar Hello.class:</code> 更新test.jar中的Hello.jar文件，如果存在则覆盖，否则添加；</li>
<li><code>jar uvf test.jar Hello.class：</code> 更新时显示详细信息；</li>
</ul>
<h2 id="小结">小结</h2>
<ol>
<li>jar包能将所需要的类封装，处理包含多个类的程序时十分方便。</li>
<li>当类中声明所在的package时，其他类调用该类只需import对应文件夹下的类名即可</li>
<li>jar包会自动生成一个MANIFEST.MF文件，也可以通过自定义生成，在自定义的清单文件中，需要声明主类和该类所需要的jar包。</li>
<li>实验过程中发现，当所写的类声明了package后，不能直接进入package类中对该类进行编译，而是需要退到上级目录，才能对该类进行编译。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>Domino</title>
    <url>/2021/11/16/Domino/</url>
    <content><![CDATA[<blockquote>
<p>CodeForces 第101题。</p>
</blockquote>
<p><strong>原题：</strong></p>
<center><font size = 5><strong>101. Domino</strong></font></center>
<center>time limit per test: 0.25 sec. </center>
<center>memory limit per test: 4096 KB </center>
<p><em>Dominoes – game played with small, rectangular blocks of wood or other material, each identified by a number of dots, or pips, on its face. The blocks usually are called bones, dominoes, or pieces and sometimes men, stones, or even cards.</em></p>
<p><em>The face of each piece is divided, by a line or ridge, into two squares, each of which is marked as would be a pair of dice…The principle in nearly all modern dominoes games is to match one end of a piece to another that is identically or reciprocally numbered.</em><br>
<em>ENCYCLOPÆDIA BRITANNICA</em></p>
<p>Given a set of domino pieces where each side is marked with two digits from 0 to 6. Your task is to arrange pieces in a line such way, that they touch through equal marked sides. It is possible to rotate pieces changing left and right side.</p>
<p>Input</p>
<p>The first line of the input contains a single integer <em>N</em> (1 ≤ <em>N</em> ≤ 100) representing the total number of pieces in the domino set. The following <em>N</em> lines describe pieces. Each piece is represented on a separate line in a form of two digits from 0 to 6 separated by a space.</p>
<p>Output</p>
<p>Write “No solution” if it is impossible to arrange them described way. If it is possible, write any of way. Pieces must be written in left-to-right order. Every of N lines must contains number of current domino piece and sign “+” or “-“ (first means that you not rotate that piece, and second if you rotate it).</p>
<p>Sample Input</p>
<pre class="line-numbers language-none"><code class="language-none">5 
1 2 
2 4 
2 4 
6 4 
2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Sample Output</p>
<pre class="line-numbers language-none"><code class="language-none">2 -
5 +
1 +
3 +
4 -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>题意理解</strong><br>
有n块多米诺骨牌，每张牌的两面分别是0~6的数字，我们可以重新排列这些骨牌的顺序，并决定是否翻转这些骨牌(翻转用’-'表示)，使得每个骨牌后面的数字与相邻的骨牌前面的数字相同。输出一种可行的方案。<br>
样例： 4 2   2 1  1 2   2 4   4 6<br>
<img src="../../../../picture/101%E5%A4%9A%E7%B1%B3%E8%AF%BA%E9%AA%A8%E7%89%8C.png" alt="图解"><br>
看到题目之后，首先想到判断是否为半欧拉图或欧拉图</p>
<ul>
<li><strong>半欧拉图</strong>：在一个图中，如果存在一条通过图中每条边一次且仅一次行遍图中每个顶点的通路且不存在通过图中每条边一次且仅一次行遍图中每个顶点的回路，则称G是半欧拉图。</li>
<li><strong>欧拉图</strong>：通过图(无向图或有向图)中所有边且每边仅通过一次通路，相应的回路称为欧拉回路。具有欧拉回路的图称为欧拉图。</li>
</ul>
<p>判断是否为半欧拉图: 当无向图G是连通的且恰有两个奇度顶点。<br>
证明过程：</p>
<blockquote>
<p>离散数学(第2版) 屈婉玲 P317</p>
</blockquote>
<p>题目中多米诺骨牌可视为无向图，因此可直接看是否连通和通过奇度顶点判断</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;判断是否连通
for (int i &#x3D; 1; i &lt;&#x3D; n; i++)
		if (!vis[i])
		&#123;
			printf(&quot;No solution\n&quot;);
			return 0;
		&#125;

&#x2F;&#x2F;计算奇度顶点个数
bool check()
&#123;
	&#x2F;&#x2F;计数
	int count &#x3D; 0;
	for (int i &#x3D; 0; i &lt;&#x3D; 6; i++)
		if (degree[i] &amp; 1)
		&#123;
			count++;
			startPos &#x3D; i;
		&#125;
	&#x2F;&#x2F;等于2为半欧拉图, 等于0为欧拉图，其余都不是
	if (count &#x3D;&#x3D; 1 || count &gt; 2) return false;
	if (count &#x3D;&#x3D; 2) return true;
	for (int i &#x3D; 0; i &lt;&#x3D; 6; i++)
		if (degree[i] &gt; 0)
		&#123;
			startPos &#x3D; i;
			break;
		&#125;
	return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>经过上一步的判断之后，通过深度优先搜索进行遍历，查看一条边的相邻边，直到走完为止。</p>
<h4 id="解题思路">解题思路</h4>
<ol>
<li>首先创建一个edge结构体，将边信息记录。为方便后面查找相邻边，可添加next属性记录相邻边所在行数，在源代码中用head数组表示。</li>
<li>判断是否为欧拉图或半欧拉图，不是则直接输出 No solution</li>
<li>从某个奇度顶点开始，寻找与之相邻的一条边，<strong>当下一条边确定后，再将这条边加入ans数组中</strong>。遍历的同时，使用visit数组记录浏览过的点。</li>
<li>判断每个点是否都被浏览过。</li>
</ol>
<p><strong>源代码</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
inline int mabs(int x)
&#123;
	if (x &gt; 0) return x;
	else return -x;
&#125;
struct T
&#123;
	int v, next, id;
&#125;edge[250];
int head[250], cnt;
void add_edge(int u, int v, int id)
&#123;
	edge[cnt].v &#x3D; v;
	edge[cnt].id &#x3D; id;
	edge[cnt].next &#x3D; head[u];
	head[u] &#x3D; cnt++;
&#125;
int ans[250], tot, degree[250];
bool vis[205];
void dfs(int u)
&#123;
	for (int i &#x3D; head[u]; i !&#x3D; -1; i &#x3D; edge[i].next)
	&#123;
		int v &#x3D; edge[i].v;
		int id &#x3D; edge[i].id;
		if (!vis[mabs(id)])
		&#123;
			vis[mabs(id)] &#x3D; 1;
			dfs(v);&#x2F;&#x2F;先dfs下一条边，再保存当前访问的边
			ans[++tot] &#x3D; id;
		&#125;
	&#125;
&#125;
int n, a, b, startPos &#x3D; -1;
bool check()
&#123;
	&#x2F;&#x2F;计数
	int count &#x3D; 0;
	for (int i &#x3D; 0; i &lt;&#x3D; 6; i++)
		if (degree[i] &amp; 1)
		&#123;
			count++;
			startPos &#x3D; i;
		&#125;
	&#x2F;&#x2F;等于2为半欧拉图, 等于0为欧拉图，其余都不是
	if (count &#x3D;&#x3D; 1 || count &gt; 2) return false;
	if (count &#x3D;&#x3D; 2) return true;
	for (int i &#x3D; 0; i &lt;&#x3D; 6; i++)
		if (degree[i] &gt; 0)
		&#123;
			startPos &#x3D; i;
			break;
		&#125;
	return true;
&#125;
int main()
&#123;
	memset(head, -1, sizeof head);
	scanf(&quot;%d&quot;, &amp;n);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)
	&#123;
		scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
		add_edge(a, b, i);
		add_edge(b, a, -i);
		degree[a]++;
		degree[b]++;
	&#125;

	if (!check())
	&#123;
		printf(&quot;No solution\n&quot;);
		return 0;
	&#125;

	dfs(startPos);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)
		if (!vis[i])
		&#123;
			printf(&quot;No solution\n&quot;);
			return 0;
		&#125;
	for (int i &#x3D; tot; i &gt;&#x3D; 1; i--)
		if (ans[i] &gt; 0)
			printf(&quot;%d +\n&quot;, ans[i]);
		else
			printf(&quot;%d -\n&quot;, -ans[i]);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE内部类与异常处理</title>
    <url>/2021/11/09/Java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>JavaSE</h1>
<h2 id="基础">基础</h2>
<h3 id="super">super</h3>
<ol>
<li>
<p>super调用父类构造器，必须在构造方法的第一个</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
    
    <span class="token comment">//私有的东西无法继承</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//隐藏代码：调用父类的无参构造</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student无参构造了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"test2"</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Student</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Student</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//Person</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>super只能出现在子类的方法或构造方法中！</p>
</li>
<li>
<p>super和this不能同时调用构造方法</p>
</li>
</ol>
<h3 id="接口">接口</h3>
<ol>
<li>
<p>使用接口进行约束</p>
</li>
<li>
<p>定义一些方法，让不同人实现</p>
</li>
<li>
<p>接口中所有定义的方法都是抽象的 public abstract</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> <span class="token class-name">Age</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
    <span class="token comment">//所有定义的方法都是抽象的</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>必须重写接口中的所有方法。</p>
</li>
<li>
<p>接口不能被实例化，且无构造方法</p>
</li>
<li>
<p>使用<code>public static final</code>不能被继承</p>
</li>
<li>
<p>使用implement可以实现多个接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">,</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="N种内部类">N种内部类</h3>
<ol>
<li>
<p>内部类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Outer</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过外部类来实例化内部类</span>
        outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>内部类可以访问外部类的私有属性</strong></p>
</li>
<li>
<p>静态内部类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>静态内部类无法访问外部类私有属性，因为static会先初始化，此时还未初始化外部类的私有属性</p>
</li>
<li>
<p>写在外部类外的内部类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个文件中只能有一个public类。</p>
</li>
<li>
<p>匿名内部类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">UserServices</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="异常处理">异常处理</h3>
<ol>
<li>java异常类型</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/265e76bd3e6c3a5ee6f79b36cce88e4b.png" alt="265e76bd3e6c3a5ee6f79b36cce88e4b.png"></p>
<ol start="2">
<li>
<p>异常处理五个关键字</p>
<ul>
<li>try</li>
<li>catch</li>
<li>finally</li>
<li>throw</li>
<li>throws</li>
</ul>
</li>
<li>
<p>使用方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//try监控区域</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//catch想要捕获的异常类型</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exceotion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Throwable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token comment">//处理善后工作，也可以不写</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Ctrl + Alt +T</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//try监控区域</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//catch想要捕获的异常类型</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token comment">//处理善后工作，也可以不写</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//throw</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主动的抛出异常</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设这方法中，处理不了这个异常，则在方法上抛出异常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//throw</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主动的抛出异常</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2021/11/03/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等。</p>
<p>在线体验一下 Markdown在线编辑器。</p>
<p>千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十 个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>
<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版， 达到「心中无尘，码字入神」的境界。</p>
<p>让我们从 Markdown 标题语法开始学习吧。</p>
<p>标题<br>
要创建标题，请在单词或短语前面添加井号(#)<br>
#的数目表示标题的级别。</p>
<p>段落<br>
空白行或多行文本分隔即可创建段落 。</p>
<p>换行<br>
在一行的末尾添加两个或多个空格，再按回车，或者添加<br></p>
<p>强调<br>
在单词或短语前后添加两个星号或下划线 。<br>
如： <strong>bold text</strong><br>
效果： bold text</p>
<p>引用<br>
在段落前添加一个&gt;符号即可 。</p>
<p>列表<br>
要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>
<p>代码<br>
要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</p>
<p>转义反引号<br>
如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。</p>
<p>分割线<br>
要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。</p>
<p>链接<br>
链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p>
<p>超链接Markdown语法代码：<a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接显示名</a></p>
<p>图片<br>
要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p>
<p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p>
<p>转义<br>
显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>markwown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaFx总结</title>
    <url>/2021/11/15/JavaFx%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、题目">一、题目</h2>
<p>JavaFx总结</p>
<h2 id="二、摘要">二、摘要</h2>
<h4 id="什么是JavaFx？">什么是JavaFx？</h4>
<p>JavaFX是用于构建富互联网应用程序的Java库。 使用此库编写的应用程序可以跨多个平台一致运行。使用JavaFX开发的应用程序可以在各种设备上运行，如台式计算机，手机，电视，平板电脑等。要使用Java编程语言开发GUI应用程序，程序员依赖于诸如高级窗口工具包(AWT)和Swings之类的库。在JavaFX出现之后，这些Java程序开发就可以有效地利用丰富的类库来开发GUI应用程序。</p>
<h4 id="JavaFx特性">JavaFx特性</h4>
<ul>
<li><strong>Written in Java</strong> - JavaFX库是用Java编写的，可用于可在JVM上执行的语言，包括<strong>Java, Groovy and JRuby</strong> 。 这些JavaFX应用程序也与平台无关。</li>
<li><strong>FXML</strong> - JavaFX使用称为FXML的语言，它是一种类似于声明性标记语言的HTML。 此语言的唯一目的是定义用户界面。</li>
<li><strong>Scene Builder</strong> - JavaFX提供名为Scene Builder的应用程序。 在将此应用程序集成到IDE（例如Eclipse和NetBeans）中时，用户可以访问拖放设计界面，该界面用于开发FXML应用程序（就像Swing Drag＆Drop和DreamWeaver应用程序一样）。</li>
<li><strong>Swing Interoperability</strong> - 在JavaFX应用程序中，您可以使用<strong>Swing Node</strong>类嵌入Swing内容。 同样，您可以使用嵌入式Web内容和丰富的图形媒体等JavaFX功能更新现有的Swing应用程序。</li>
<li><strong>Built-in UI controls</strong> - JavaFX库提供UI控件，使用它可以开发功能齐全的应用程序。</li>
<li><strong>CSS like Styling</strong>这样的CSS - JavaFX提供了类似样式的CSS。 通过使用它，您可以通过简单的CSS知识改进应用程序的设计。</li>
<li><strong>Canvas and Printing API</strong> - JavaFX提供了Canvas，一种即时模式的渲染API。 在包<strong>javafx.scene.canvas</strong>它包含一组canvas类，我们可以使用它直接在JavaFX场景的区域内绘制。 JavaFX还在包<strong>javafx.print</strong>提供用于打印目的的类。</li>
<li><strong>Rich set of API’s</strong> - JavaFX库提供了丰富的API来开发GUI应用程序，2D和3D图形等。这套API还包括Java平台的功能。 因此，使用此API，您可以访问Java语言的功能，如泛型，注释，多线程和Lambda表达式。 传统的Java Collections库得到了增强，其中包含了可观察List and Map等概念。 使用这些，用户可以观察数据模型中的变化。</li>
<li><strong>Integrated Graphics library</strong> - JavaFX提供<strong>2d</strong>和<strong>3d</strong>图形的类。</li>
<li><strong>Graphics pipeline</strong> - JavaFX支持基于硬件加速图形管道（称为Prism）的图形。 与支持的图形卡或GPU一起使用时，它可提供流畅的图形。 如果系统不支持图形卡，则棱镜默认为软件渲染堆栈。</li>
</ul>
<h2 id="三、前言">三、前言</h2>
<h3 id="目的">目的</h3>
<ol>
<li>总结[《java程序设计与问题求解》](<a href="http://www.tup.tsinghua.edu.cn/booksCenter/book_05997501.html">清华大学出版社-图书详情-《Java程序设计与问题求解（第7版）》 (tsinghua.edu.cn)</a>)中第1章到第8章怎么建立图像对象。</li>
<li>添加按钮等交互式控件，并总结响应的三种用法。</li>
<li>掌握JavaFx的基本用法。</li>
</ol>
<h3 id="内容概述">内容概述</h3>
<ol>
<li>对[《java程序设计与问题求解》](<a href="http://www.tup.tsinghua.edu.cn/booksCenter/book_05997501.html">清华大学出版社-图书详情-《Java程序设计与问题求解（第7版）》 (tsinghua.edu.cn)</a>)第1章到第8章中JavaFx程序内容进行回顾，分析如何建立一个空窗口，如何添加和绘制图像。</li>
<li>总结事件驱动的三种响应方式。
<ul>
<li>在单独的类中处理事件</li>
<li>在主GUI应用类中处理事件</li>
<li>在匿名内部类中处理事件</li>
</ul>
</li>
</ol>
<h3 id="环境">环境</h3>
<ul>
<li>操作系统： Window10</li>
<li>JDK版本： java8  （<strong>java8中内置javaFx程序包</strong>)</li>
</ul>
<h2 id="四、内容">四、内容</h2>
<h3 id="课本内容总结">课本内容总结</h3>
<h4 id="第一章">第一章</h4>
<p>第一章内容绘制了一张笑脸，下面通过逐段遍历的方式介绍该代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">Canvas</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Group</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">GraphicsContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>shape<span class="token punctuation">.</span></span><span class="token class-name">ArcType</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HappyFace</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">Group</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">GraphicsContext</span> gc <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getGraphicsContext2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      gc<span class="token punctuation">.</span><span class="token function">strokeOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  gc<span class="token punctuation">.</span><span class="token function">strokeArc</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token class-name">ArcType</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

      root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"HappyFace in JavaFX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>
<p>第1~7行引入JavaFx程序包，其中包含了Application、Canvas等用于绘制图像或建立窗口的类。</p>
</li>
<li>
<p>第9行是类定义，即说明该类被命名为HappyFace。该应用程序包含两个方法：main和start。main方法是Java程序开始的地方。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是，JavaFX应用程序有所不同。JavaFX程序的执行始于start方法，在正确部署的JavaFX应用程序中是忽略main方法的。但是，很常见的一种做法是，在程序中包含一个main方法，以及一个对launch方法的调 用，launch方法作为一个应变方法，最终启动JavaFX程序和start方法。<br>
<strong>对于JavaFX应用程序，程序会在start方法中开始执行。</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>上一步的<code>primaryStage</code>是JavaFX用户接口的顶级容器，用<code>Stage</code>类表示。在Windows中，它通常就是一个窗口。当JavaFX启动时，一个舞台被自动创建，并通过参数传递给<code>start</code>方法。我们可以给舞台设置场景(Scene)，场景可以添加控件和其他用户接口节点。通过这种方式，我们创建应用程序的用户界面。</p>
</li>
<li>
<p><code>Stage</code>类包含了许多方法用于控制舞台外观和行为。</p>
<ul>
<li>
<p>对于绝大多数应用，必须有下面三个方法</p>
<ul>
<li><code>setScene</code>：舞台必须有一个场景，该函数用于设置舞台的场景</li>
<li><code>setTitle</code>：舞台应该有一个标题，该函数用于设置舞台（窗口）的标题</li>
<li><code>show</code>：调用该方法后，舞台才会被显示</li>
</ul>
<p>在HappyFace类中，第19、20、30~32即为上述步骤</p>
</li>
<li>
<p>禁止用户调整舞台尺寸。默认情况下，窗口是大小可调的，如果想禁止，使用方法<br>
<code>primaryStage.setResizeable(false)</code></p>
</li>
<li>
<p>关闭窗口<code>close</code>方法</p>
</li>
</ul>
</li>
<li>
<p>第22行创建了<code>cavas</code>(画布), 即图像绘制的地方。</p>
<ul>
<li>
<p><code>gc.strokeOval(100, 50, 200, 200);</code><br>
上述代码绘制了一个大圆圈，它构成了脸的轮廓，其中前两个数字表示圆圈在屏幕上绘制的位置。你可能已经猜到，strokeOval方法会绘制椭圆。最后两个数字给出了椭圆的宽度和高度。为了得到一个圆圈，可以让宽度和高度相等。</p>
</li>
<li>
<p>下面的两个方法调用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>绘制了两个眼睛(椭圆)。</p>
</li>
<li>
<p><code>gc.strokeArc(150, 160, 100, 50, 180, 180, ArcType.OPEN);</code></p>
<p>绘制了笑脸，即弧度。前四个参数同椭圆的绘制一样。第五个引元是起始角的度数，第六个是可视角的度数。该代码表示在宽150px, 高160px的位置，绘制一个宽100，高50的不可视的矩形。矩形中又有一个椭圆。椭圆与矩形四条边均有一个交汇点。其中，第180度为起始角，可以从椭圆第180度开始，绘制一个180度的弧线。</p>
</li>
</ul>
</li>
</ol>
<p>程序运行效果如图<br>
<img src="https://i.bmp.ovh/imgs/2021/11/9d0f86f93c35a255.png" alt=""></p>
<h4 id="第二章">第二章</h4>
<ul>
<li>
<p><strong>将样式规则应用于JavaFx程序</strong></p>
<pre class="line-numbers language-none"><code class="language-none">import javafx.application.Application;
import javafx.scene.canvas.Canvas;
import javafx.scene.Scene;
import javafx.scene.Group;
import javafx.stage.Stage;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.shape.ArcType;
&#x2F;**
 JavaFX Application that displays a happy face.
 Author: Jane Q. Programmer
 Revision of Listing 1.2.
*&#x2F;

public class HappyFace extends Application
&#123;
   public static final int WINDOW_WIDTH &#x3D; 400;
   public static final int WINDOW_HEIGHT &#x3D; 300;

   public static final int FACE_DIAMETER &#x3D; 200;
   public static final int X_FACE &#x3D; 100;
   public static final int Y_FACE &#x3D; 50;

   public static final int EYE_WIDTH &#x3D; 10;
   public static final int EYE_HEIGHT &#x3D; 20;
   public static final int X_RIGHT_EYE &#x3D; 155;
   public static final int Y_RIGHT_EYE &#x3D; 100;
   public static final int X_LEFT_EYE &#x3D; 230;
   public static final int Y_LEFT_EYE &#x3D; Y_RIGHT_EYE;

   public static final int MOUTH_WIDTH &#x3D; 100;
   public static final int MOUTH_HEIGHT &#x3D; 50;
   public static final int X_MOUTH &#x3D; 150;
   public static final int Y_MOUTH &#x3D; 160;
   public static final int MOUTH_START_ANGLE &#x3D; 180;
   public static final int MOUTH_DEGREES_SHOWN &#x3D; 180;

   public static void main(String[] args)
   &#123;
      launch(args);
   &#125;

   @Override
   public void start(Stage primaryStage) throws Exception
   &#123;
	  Group root &#x3D; new Group();
   	  Scene scene &#x3D; new Scene(root);

      Canvas canvas &#x3D; new Canvas(WINDOW_WIDTH, WINDOW_HEIGHT);
      GraphicsContext gc &#x3D; canvas.getGraphicsContext2D();
      &#x2F;&#x2F; Draw face outline
      gc.strokeOval(X_FACE, Y_FACE, FACE_DIAMETER, FACE_DIAMETER);
      &#x2F;&#x2F; Draw eyes
	  gc.fillOval(X_RIGHT_EYE, Y_RIGHT_EYE, EYE_WIDTH, EYE_HEIGHT);
	  gc.fillOval(X_LEFT_EYE, Y_LEFT_EYE, EYE_WIDTH, EYE_HEIGHT);
	  &#x2F;&#x2F; Draw mouth
	  gc.strokeArc(X_MOUTH, Y_MOUTH, MOUTH_WIDTH, MOUTH_HEIGHT,
	               MOUTH_START_ANGLE, MOUTH_DEGREES_SHOWN, ArcType.OPEN);

      root.getChildren().add(canvas);
      primaryStage.setTitle(&quot;HappyFace in JavaFX&quot;);
      primaryStage.setScene(scene);
      primaryStage.show();
   &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为所有整数引元都添加了具名变量，并且添加了解释性的注释。乍一看，这些具名变量使得代码变复杂了。但是，它们使得编写和修改代码变得容易得多。编写这种常量有助于规划和组织你的绘图。具名常量使得你可以清楚而明确地说明各项限制。</p>
</li>
<li>
<p><strong>JOptionPane类</strong><br>
JOptionPane类能产生一个带有窗口的Java程序。首先，需要导入包<br>
<code>import javax.swing.JOptionPane;</code><br>
JOptionPane的使用很简单，如果需要创建消息框，只需</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"This is output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果需要创建输入框，则</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"Input what you want"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h4 id="第三章">第三章</h4>
<ul>
<li>
<p><strong>指定绘图颜色</strong><br>
在第1章中，我们绘制了HappyFace，现在我们可以为HappyFace填上颜色。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">Canvas</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Group</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">GraphicsContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>shape<span class="token punctuation">.</span></span><span class="token class-name">ArcType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>paint<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YellowFace</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WINDOW_WIDTH <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WINDOW_HEIGHT <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FACE_DIAMETER <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X_FACE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Y_FACE <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EYE_WIDTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EYE_HEIGHT <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X_RIGHT_EYE <span class="token operator">=</span> <span class="token number">155</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Y_RIGHT_EYE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X_LEFT_EYE <span class="token operator">=</span> <span class="token number">230</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Y_LEFT_EYE <span class="token operator">=</span> Y_RIGHT_EYE<span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOSE_DIAMETER <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X_NOSE <span class="token operator">=</span> <span class="token number">195</span><span class="token punctuation">;</span> <span class="token comment">// Center of nose at 200</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Y_NOSE <span class="token operator">=</span> <span class="token number">135</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOUTH_WIDTH <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOUTH_HEIGHT <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X_MOUTH <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Y_MOUTH <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOUTH_START_ANGLE <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOUTH_DEGREES_SHOWN <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
    <span class="token class-name">Group</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>WINDOW_WIDTH<span class="token punctuation">,</span> WINDOW_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsContext</span> gc <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getGraphicsContext2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Draw face interior in yellow and outline in black</span>
    gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>X_FACE<span class="token punctuation">,</span> Y_FACE<span class="token punctuation">,</span> FACE_DIAMETER<span class="token punctuation">,</span> FACE_DIAMETER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gc<span class="token punctuation">.</span><span class="token function">strokeOval</span><span class="token punctuation">(</span>X_FACE<span class="token punctuation">,</span> Y_FACE<span class="token punctuation">,</span> FACE_DIAMETER<span class="token punctuation">,</span> FACE_DIAMETER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Draw eyes</span>
    gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>X_RIGHT_EYE<span class="token punctuation">,</span> Y_RIGHT_EYE<span class="token punctuation">,</span> EYE_WIDTH<span class="token punctuation">,</span> EYE_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>X_LEFT_EYE<span class="token punctuation">,</span> Y_LEFT_EYE<span class="token punctuation">,</span> EYE_WIDTH<span class="token punctuation">,</span> EYE_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Draw nose</span>
	gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>
	gc<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>X_NOSE<span class="token punctuation">,</span> Y_NOSE<span class="token punctuation">,</span> NOSE_DIAMETER<span class="token punctuation">,</span> NOSE_DIAMETER<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Draw mouth</span>
	gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
	gc<span class="token punctuation">.</span><span class="token function">strokeArc</span><span class="token punctuation">(</span>X_MOUTH<span class="token punctuation">,</span> Y_MOUTH<span class="token punctuation">,</span> MOUTH_WIDTH<span class="token punctuation">,</span> MOUTH_HEIGHT<span class="token punctuation">,</span>
	             MOUTH_START_ANGLE<span class="token punctuation">,</span> MOUTH_DEGREES_SHOWN<span class="token punctuation">,</span> <span class="token class-name">ArcType</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"HappyFace in JavaFX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>gc.setFill(Color.YELLOW);</code>将画笔的颜色设置为黄色。因此绘制出了黄色的脸</li>
</ul>
<p><img src="https://i.bmp.ovh/imgs/2021/11/596ae763ac58897e.png" alt=""></p>
</li>
<li>
<p><strong>Yes或No问题的对话框</strong><br>
使用JOptionPane类来创建一个对话框</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"cofirm?"</span><span class="token punctuation">,</span> <span class="token string">"clicked Yes or No"</span><span class="token punctuation">,</span> 									  <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>YES_NO_OPTION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://i.bmp.ovh/imgs/2021/11/a50fb863c42e6d3d.png" alt=""></p>
</li>
</ul>
<h4 id="第四章">第四章</h4>
<ul>
<li><strong>绘制文本</strong><br>
使用setFont方法可用来修改当前的字体。<br>
<code>gc.setFont(Font.font(&quot;Times New Roman&quot;, 12));</code><br>
将字体设置为尺寸为12个点的Times New Roman。<br>
下面的语句会以当前字体从(10, 20)处开始写文本。<br>
<code>gc.fillText(&quot;Hello world&quot;, 10, 20);</code></li>
</ul>
<h4 id="第五章">第五章</h4>
<ul>
<li>
<p><strong>GraphicsContext</strong></p>
<ul>
<li>
<p>JavaFX应用程序使用的是舞台和场景的隐喻，因为它们就像剧院 中的舞台和场景一样。Stage类是顶层的JavaFX容器，在我们的例子中，它对应于窗口。每个Stage都有一个相关联的Scene对象，这个Scene对象包含一组称为场景图的节点。这些节点由Node类表示，描述了应用程序的一个场景，就像剧本、演员和道具描述了戏剧或电影的一个场景一样。在JavaFX中，场景图是层次化的节点集，其中根节点位于树的顶端。在根节点之下，我们可以创建包含布局构件的子树，例如可以绘制到场景中的面板、按钮、文本或形状。节点具有属性，包括文本、尺寸、位置、颜色和可视化效果等。</p>
</li>
<li>
<p>GraphicsContext类的对象表示的是一块屏幕区域，它包含绘制图形、图像、文本和应用视觉效果的方法。GraphicsContext会与一 个Canvas对象关联，该对象又是Stage（窗口）中显示的Scene对象中的节点层次结构的一部分。</p>
</li>
<li>
<p>JavaFx可以读取常见的图像格式，如GIF，JPEG，PNG。<br>
下列代码将展示图片读取和GraphicsContext的使用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">Canvas</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Group</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">GraphicsContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>shape<span class="token punctuation">.</span></span><span class="token class-name">ArcType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>paint<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">Image</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>effect<span class="token punctuation">.</span></span><span class="token class-name">Reflection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageExample</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	<span class="token class-name">Group</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Java looks for "java.jpg" in the default folder</span>
	<span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string">"java.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GraphicsContext</span> gc <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getGraphicsContext2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Draw image in normal scaling at (1,1)</span>
    gc<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Draw image twice as large to the right of</span>
    <span class="token comment">// previous image</span>
    gc<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
        		 img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// Draw image below the first with a reflection effect</span>
    gc<span class="token punctuation">.</span><span class="token function">setEffect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Reflection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gc<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Drawing Images in JavaFX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p><strong>向JavaFx程序添加标签</strong></p>
<p>我们可以向JavaFX程序中添加多项构件。当这样做时，需要指定这些构件在窗口中在视觉上应该如何排列。 我 们 通 过 导 入<code>javafx.scene.layout.VBox</code>来访问整个类，然后在代码中按照下面的方式来使用它：<br>
<code>VBox root = new VBox();</code><br>
我们将标签创建为Label对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Label</span> <span class="token operator">=</span> label1<span class="token punctuation">;</span>
labe1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还可以为标签单独设置字体或其他属性，如</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">label1<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后，通过下面的语句将标签添加到布局中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<p><strong>示例</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">Font</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">VBox</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Label</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LabelDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">VBox</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Label</span> label1<span class="token punctuation">,</span> label2<span class="token punctuation">;</span>
	  label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  label1<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Out there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  label2<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"Courier New"</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Label Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果<br>
<img src="https://i.bmp.ovh/imgs/2021/11/78f324d5c288c0b5.png" alt=""></p>
</li>
</ul>
<h4 id="第六章">第六章</h4>
<ul>
<li>
<p><strong>添加按钮</strong></p>
<p>按钮是应用程序中一种看起来像按钮的对象，当你用鼠标点击它时，就会执行某些操作。创建按钮对象的方式与创建标签对象的方式相同，只是使用的是Button类而不是Label类，这需要从javafx.scene.control.Button中 导入Button类。例如:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Button</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在创建按钮之后，需要按照与添加标签相同的方式将其添加到布局中。例如:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>与标签不同，我们可以将动作与按钮关联起来，使得当用户用鼠标点击按钮时，程序就会执行某个动作。如果直接点击按钮，不会发生任何事。为了实现按钮后的动作，我们使用了事件驱动编程。在第8章的总结中会讲到。</p>
</li>
<li>
<p><strong>添加图标</strong></p>
</li>
<li>
<p>JavaFX会将数字图像文件转换为图标，然后我们就可以将该图标添加到标签、按钮或其他构件上。我们可以在任何标签或按钮上显示一个图标或一个字符串，或者同时显示一个图标和一个字符串。JavaFX库中的Image和ImageView类可用来将数字图像文件转换为图标。例如，下面的语句会将名为duke_waving.gif的数字图像文件转换为名为imgDuke的图标。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Image</span> imgDuke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string">"duke_waving.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们可以通过使用setGraphic方法将图标添加到某个按钮上，如</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">btn<span class="token punctuation">.</span><span class="token function">setGraphic</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span>imgDuke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h4 id="第七章">第七章</h4>
<ul>
<li>
<p><strong>布局面板</strong></p>
<ol>
<li>
<p><strong>HBox布局面板</strong></p>
<p>HBox布局面板是对VBox布局面板的补充。简单地讲，它会将我们的构件（或者说节点）在面板中水平而不是垂直地排列。如果多个 构件占据了面板的整个宽度，那么每个节点都会赋予大小相等的空间。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">HBox</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>

<span class="token comment">/**
Simple demonstration of adding buttons using the HBox layout.
These buttons do not do anything. That comes in a later version.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HBoxDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">HBox</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"HBox Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果<br>
<img src="https://i.bmp.ovh/imgs/2021/11/58d8fde8f43eace1.png" alt=""></p>
</li>
<li>
<p><strong>StackPane布局</strong></p>
<p>StackPane布局会将构建彼此堆叠起来，每个新的节点都会被置于前一个构件的顶部。这种布局提供了一种方式，可以将文本覆盖在某个形状或图片上，或者覆盖在多个形状上，从而创建出更复杂的形状。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">StackPane</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Label</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">Font</span><span class="token punctuation">;</span>
<span class="token comment">/**
Simple demonstration of drawing two letters on top of each other
using the StackPane layout.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackPaneDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">StackPane</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token class-name">Label</span> label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  label1<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"Courier New"</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token class-name">Label</span> label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  label2<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"Courier New"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"StackPane Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果：<br>
<img src="https://i.bmp.ovh/imgs/2021/11/8820ded048eed924.png" alt=""></p>
</li>
<li>
<p><strong>FlowPane布局</strong></p>
<p>FlowPane布局会自左向右地添加节点。当节点达到面板边缘时， 下一个节点就会绕回或“流回”左边，并从已有节点下面新的一行重新开始排列。如果想要按照顺序显示各个项，那么这就是一种简单便捷的布局。如果缩放窗口，就会看到所有节点会自动地流动，以适配可用的空间。我们可以使用setVgap和setHgap方法来控制元素之前垂直空间和水平空间的大小，这些方法可以设置垂直元素和水平元素之间的像素数量。如果没有这些方法，节点就会彼此紧挨着显示。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">FlowPane</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>
<span class="token comment">/**
Simple demonstration of adding buttons to the FlowPane layout.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowPaneDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">FlowPane</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Set a gap of 5 pixels vertically and horizontally</span>
	  <span class="token comment">// between buttons</span>
	  root<span class="token punctuation">.</span><span class="token function">setVgap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setHgap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"FlowPane Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果：<br>
<img src="https://i.bmp.ovh/imgs/2021/11/c46668e353b883ee.png" alt=""></p>
</li>
<li>
<p><strong>GridPane布局</strong></p>
<p>GridPane布局允许我们在由行和列构成的格式灵活的网格中排列节点，其中的行和列可以像二维数组一样访问，左上角的单元格位于第0行第0列。HPos和VPos类可以用来设置单元格内的水平对齐或垂直对齐。程序清单7.18演示了一个GridPane对象，它最左边的列是标</p>
<p>签（单元格（0，0）和（0，1）），在标签的右边是按钮（单元格（1，0）和（1，1））。在单元格（2，2）中还放置了一个标签。注意，我们无须调用getChildren（）方法就可以向GridPane中添加构件。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">GridPane</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span></span><span class="token class-name">HPos</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Label</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span></span><span class="token class-name">Insets</span><span class="token punctuation">;</span>
<span class="token comment">/**
Simple demonstration of adding buttons and labels
to the GridPane layout.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GridPaneDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">GridPane</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Set a gap of 5 pixels vertically and horizontally</span>
	  <span class="token comment">// between elements</span>
	  root<span class="token punctuation">.</span><span class="token function">setVgap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setHgap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token comment">// Margins around the top, right, bottom, and left</span>
	  root<span class="token punctuation">.</span><span class="token function">setPadding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Insets</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Add three nodes, by default horizontally left-aligned</span>
	  root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Option 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"This is Button 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Option 2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Add a button that is horizontally right-aligned</span>
	  <span class="token class-name">Button</span> btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Button 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token class-name">GridPane</span><span class="token punctuation">.</span><span class="token function">setHalignment</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> <span class="token class-name">HPos</span><span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Add a label to the bottom right of the buttons</span>
	  root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Out there"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"GridPane Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果：<br>
<img src="https://i.bmp.ovh/imgs/2021/11/790f33fbf5f50a68.png" alt=""></p>
</li>
<li>
<p>BorderPane布局</p>
</li>
<li>
<p>BorderPane布局会在图7.9所示的五个区域内放置节点。这些区域分别是顶部、底部、左边、右边和中间，它们对应于典型应用程序中顶部的菜单或工具条、左边的导航栏、中间的主要内容、右边的附加信息和底部的状态信息。<br>
<img src="https://i.bmp.ovh/imgs/2021/11/24e9f9ab263df1c6.png" alt=""></p>
<p>例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">BorderPane</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>
<span class="token comment">/**
Simple demonstration of adding buttons to the BorderPane layout.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorderPaneDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">BorderPane</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorderPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  root<span class="token punctuation">.</span><span class="token function">setTop</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Top Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Left Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setCenter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Center Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Right Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">setBottom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Bottom Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"BorderPane Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果<br>
<img src="https://img10.360buyimg.com/ddimg/jfs/t1/213104/5/4652/11255/6192610bEdcdea91b/40efb2bd40f72670.png" alt="image.png"></p>
</li>
</ol>
</li>
<li>
<p><strong>文本域、文本框和组合布局</strong></p>
<ul>
<li>文本域是应用程序中类似窗口的区域，它可以用于文本的输入和输出。文本域拥有的空间可以包含任意数量的行，每一行可以包含任意数量的字符。文本框类似，只是它的空间只包含一行文本。</li>
<li>为了创建文本域，需要使用TextArea类。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextArea</span> txtInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token string">"Default text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>文本框</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextField</span> txtOneLine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">"Default text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>组合布局</p>
<p>布局面板中的节点可以包含另一个布局面板。通过组合多个布局，我们就可以创建出自己定制的布局。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">root<span class="token punctuation">.</span><span class="token function">setCenter</span><span class="token punctuation">(</span>flowPane<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">setTop</span><span class="token punctuation">(</span>hBoxPane<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>绘制多边形</p>
<p>GraphicsContext的方法strokePolygon可以让我们绘制任意多 边形。该方法需要三个引元：第一个引元是用来指定各个点的x坐标的double数组，第二个引元是用来指定各个点的y坐标的另一个double数组，第三个引元是点的个数。这两个数组中包含相同数量的值，并且可以是部分填充的，这也是为什么需要第三个引元的原因。例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">Canvas</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Group</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span></span><span class="token class-name">GraphicsContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>paint<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolygonDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xHouse <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yHouse <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xDoor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yDoor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xWindow <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yWindow <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">Group</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">Canvas</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">GraphicsContext</span> gc <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getGraphicsContext2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gc<span class="token punctuation">.</span><span class="token function">fillPolygon</span><span class="token punctuation">(</span>xHouse<span class="token punctuation">,</span> yHouse<span class="token punctuation">,</span> xHouse<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gc<span class="token punctuation">.</span><span class="token function">setFill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gc<span class="token punctuation">.</span><span class="token function">strokePolyline</span><span class="token punctuation">(</span>xDoor<span class="token punctuation">,</span> yDoor<span class="token punctuation">,</span> xDoor<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gc<span class="token punctuation">.</span><span class="token function">strokePolygon</span><span class="token punctuation">(</span>xWindow<span class="token punctuation">,</span> yWindow<span class="token punctuation">,</span> xWindow<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

      root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Home sweet home!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行效果<br>
<img src="https://img11.360buyimg.com/ddimg/jfs/t1/197027/35/17425/4425/61926325E1b3998e4/0c83f10005d5037d.png" alt="image.png"></p>
</li>
</ul>
<h4 id="第八章">第八章</h4>
<p>第八章为事件驱动编程，将在另一标题下详细说明</p>
<h3 id="事件驱动的三种方式">事件驱动的三种方式</h3>
<p>事件是一种对象，它们表示会触发响应的某个用户动作，例如用鼠标点击按钮。当一个对象产生某个事件时，就称它触发了某个事件。例如，当用户点击按钮时，该按钮就会触发一个事件。在JavaFX应用中，每个可以触发事件的对象都可以有一个或多个会自动接收事件的监听器对象。监听器对象中包含的方法指定了在该监听器接收到各种事件时应该做些什么。这些方法称为事件处理器。 接下来，我们来讨论选择监听器类的3种选项。无论选择哪种选项，监听器类都必须实现EventHandler<ActionEvent> 。</p>
<h4 id="在单独的类中处理事件">在单独的类中处理事件</h4>
<p>创建一个HandleButtonClick类。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventHandler</span><span class="token punctuation">;</span>

<span class="token comment">/**
This class handles a button click and outputs a message.
The handle method is invoked when the button is clicked.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandleButtonClick</span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActionEvent</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">HandleButtonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		message <span class="token operator">=</span> <span class="token string">"It is sunny!"</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token class-name">HandleButtonClick</span><span class="token punctuation">(</span><span class="token class-name">String</span> customMessage<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		message <span class="token operator">=</span> customMessage<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了将按钮点击事件与HandleButtonClick对象关联起来，我们使用了setOnAction方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HandleButton</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandleButtonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btnSunny<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="在主GUI应用类中处理事件">在主GUI应用类中处理事件</h4>
<p>让ButtonDemo类自身实现EventHandler<ActionEvent> 接 口 。这意味着我们需要在ButtonDemo类中添加handle方法。因为这个方法在ButtonDemo内部，所以它可以访问作为该类组成部分的任何成员变量，例如其他的UI控件。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>application<span class="token punctuation">.</span></span><span class="token class-name">Application</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span></span><span class="token class-name">Scene</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>stage<span class="token punctuation">.</span></span><span class="token class-name">Stage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>layout<span class="token punctuation">.</span></span><span class="token class-name">VBox</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>control<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javafx<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventHandler</span><span class="token punctuation">;</span>

<span class="token comment">/**
Demonstration of event handling within the ButtonDemo2 class.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ButtonDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActionEvent</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">private</span> <span class="token class-name">Button</span> btnSunny<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token class-name">Button</span> btnCloudy<span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
      <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
	   <span class="token comment">// This method can access the member variables</span>
	   <span class="token comment">// which reference the other GUI controls</span>
	   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Button</span><span class="token punctuation">)</span>
	   <span class="token punctuation">&#123;</span>
		  <span class="token class-name">Button</span> btnClicked <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       	  <span class="token keyword">if</span> <span class="token punctuation">(</span>btnClicked<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Sunny"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       	  <span class="token punctuation">&#123;</span>
			  <span class="token comment">// Disable the cloudy button if sunny clicked</span>
			  btnCloudy<span class="token punctuation">.</span><span class="token function">setDisable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		  <span class="token punctuation">&#125;</span>
       	  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>btnClicked<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Cloudy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       	  <span class="token punctuation">&#123;</span>
			  <span class="token comment">// Disable the sunny button if cloudy clicked</span>
			  btnSunny<span class="token punctuation">.</span><span class="token function">setDisable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		  <span class="token punctuation">&#125;</span>
	  <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> primaryStage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
   <span class="token punctuation">&#123;</span>
	  <span class="token class-name">VBox</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  btnSunny <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Sunny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  btnCloudy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Cloudy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  btnSunny<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  btnCloudy<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnSunny<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  root<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btnCloudy<span class="token punctuation">)</span><span class="token punctuation">;</span>

   	  <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Button Demo 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primaryStage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码确实产生了一个新的应用。由于现在只有单个对象（当前对 象）来处理两个按钮的点击事件，所以如果我们希望区分到底点击了 哪个按钮，就必须在handle方法中进行确认。在之前的版本中，我们区分哪个按钮点击的方式是每个按钮关联不同的HandleButtonClick实例。实现按钮区分的一种方式是调用getText方法，它会获取按钮上的文本。然后, 我们检查文本的内容并作出相应的动作。</p>
<h4 id="在匿名内部类中处理事件">在匿名内部类中处理事件</h4>
<p>这种技术有一个优势，就是赋予了事件处理器类访问主GUI类中所有成员变量的权限，同时又允许我们可以创建不同的监听器实例。创建实现了EventHandler<ActionEvent>接口的匿名内部类的格式如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActionEvent</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 对类定义任意成员变量或方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以将这段代码插到setOnAction方法中，并在其中填入handle方法的实现。在这个例子中，我们的实现是将ButtonDemo类标签中的文本修改为&quot;It is sunny！&quot;：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">btnSunny<span class="token punctuation">.</span><span class="token function">setOnAction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActionEvent</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        lblMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"It is sunnt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="小结">小结</h2>
<ol>
<li>strokeOval方法可以绘制椭圆轮廓。fillOval方法能填色。</li>
<li>可以使用JOptionPane类来创建用于输入和输出的窗口化界面</li>
<li>可以用setFill和Color类定义具名常量颜色。</li>
<li>JOptionPane使得我们可以将对话框用于Yes或No问题。</li>
<li>可以在JavaFx程序中使用setFont和fillText方法显示文本</li>
<li>GraphicsContext可以绘制图像，文本和图像</li>
<li>可以向JavaFx中添加按钮和图标</li>
<li>可以在JavaFx插入文本框和文本域。</li>
<li>可以在JavaFx中绘制任意多边形和折线。</li>
<li>JavaFx使用事件处理器来响应事件，事件处理器就是基于接口实现的。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaFx</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境配置</title>
    <url>/2021/11/09/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="java环境配置">java环境配置</h3>
<h3 id="目的：">目的：</h3>
<ol>
<li>学会对JDK版本的切换</li>
<li>运行javafx程序</li>
</ol>
<h3 id="实验主要硬件软件条件：">实验主要硬件软件条件：</h3>
<p>Window10<br>
JDK版本：java11, jdk17</p>
<h3 id="实验内容：">实验内容：</h3>
<h4 id="运行javafx程序">运行javafx程序</h4>
<ol>
<li>编辑系统环境变量，添加 <code>JAVA_HOME</code> , JAVA_HOME中填写JDK安装路径</li>
</ol>
<p><img src="https://i.bmp.ovh/imgs/2021/10/7223440699328b21.png" alt=""></p>
<ol start="2">
<li>在PATH中新建环境变量</li>
</ol>
<p><img src="https://i.bmp.ovh/imgs/2021/10/258c1aaa5f4eb799.png" alt=""></p>
<p><img src="https://i.bmp.ovh/imgs/2021/10/e360c50ae1907010.png" alt=""></p>
<p>写入 <code>%JAVA_HOME%\bin</code> , 点击确定即可，可点击上移将java路径放置在顶部</p>
<ol start="3">
<li>新建 <code>PATH_TO_FX</code> , 输入下载的javafx路径</li>
</ol>
<p><img src="https://i.bmp.ovh/imgs/2021/10/12de9d8e8154dd0e.png" alt=""></p>
<p><img src="https://i.bmp.ovh/imgs/2021/10/39ee83d83c60d64b.png" alt=""></p>
<ol start="4">
<li>点击确定后，打开命令提示符（win+r , cmd）。</li>
</ol>
<p><img src="https://i.bmp.ovh/imgs/2021/10/3140b9a51801f707.png" alt=""></p>
<ol start="5">
<li>
<p>进入需要运行java程序的目录</p>
<p>输入 <code>javac --module-path %PATH_TO_FX%  --add-modules javafx.controls HappyFace.java</code>  生成.class文件<br>
然后输入 <code>java --module-path %PATH_TO_FX%  --add-modules javafx.controls HappyFace</code> 执行</p>
<p><img src="https://i.bmp.ovh/imgs/2021/10/9098fa3afd9fa701.png" alt=""></p>
</li>
</ol>
<p><img src="https://i.bmp.ovh/imgs/2021/10/b784140ca3b71ce0.png" alt=""></p>
<p><code>HappyFace.java</code>改成需要运行的java文件即可</p>
<p>如<code>javac --module-path %PATH_TO_FX%  --add-modules javafx.controls YellowFace.java</code></p>
<pre><code>```java --module-path %PATH_TO_FX%  --add-modules javafx.controls YellowFace```
</code></pre>
<p><img src="https://i.bmp.ovh/imgs/2021/10/0ef0b7ddb901cc09.png" alt=""></p>
<p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/207608/28/5996/15795/616e9c2aEecdc506c/6f2154264d3183ed.png" alt="image.png"></p>
<h4 id="JDK版本的切换">JDK版本的切换</h4>
<ol>
<li>
<p>在控制台中查看当前javac与java版本，注意：javac与java必须版本一致<br>
<code>javac -version</code></p>
<p><code>java -version</code><br>
<img src="https://img14.360buyimg.com/ddimg/jfs/t1/170247/28/21612/22632/616e9d3fE3627bd54/d33a205d12e322f3.png" alt="image.png"></p>
</li>
<li>
<p>改变 JAVA_HOME 中的JDK路径<br>
<img src="https://img13.360buyimg.com/ddimg/jfs/t1/200354/9/13751/19979/616e9ddbE0f46e821/67a7125c037c71c4.png" alt="image.png"></p>
<p>点击编辑并更改路径</p>
<p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/216931/39/1017/10637/616e9f54Ee5f078ed/25e19b709069359f.png" alt="image.png"></p>
<p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/199494/20/13789/24204/616e9f2eEfd5c7fbd/c0a3f8b6167d8c06.png" alt="image.png"></p>
</li>
</ol>
<p><strong>注意：环境变量更改后需要重新启动cmd窗口，否则无法查看到更改后的java版本</strong></p>
<h3 id="小结：">小结：</h3>
<ol>
<li>通过设置JAVA_HOME可以快速切换JDK版本，非常方便。</li>
<li>运行javaFX程序时，如果使用java8则可以直接编译运行，但是java11和java17需要额外设置环境变量。</li>
</ol>
]]></content>
      <categories>
        <category>环境配置</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>算法专栏</title>
    <url>/2021/11/16/%E7%AE%97%E6%B3%95%E4%B8%93%E6%A0%8F/</url>
    <content><![CDATA[<h1>CodeForce</h1>
<ul>
<li>101.Domino(多米诺骨牌) <a href="https://codeforces.com/problemsets/acmsguru/problem/99999/101">题目链接</a> <a href="../Domino">题解</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基本知识</title>
    <url>/2021/11/09/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9A/</url>
    <content><![CDATA[<h2 id="数据库：">数据库：</h2>
<p>DataBase,简称DB.<br>
数据库就是按照一定格式存储数据的一些文件的组合。实际上就是一堆文件，这些文件中存储了具有特定格式的数据。</p>
<h3 id="数据库管理系统：">数据库管理系统：</h3>
<p>DataBaseManagement,简称DBMS.<br>
数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。<br>
常见的数据库管理系统：<br>
MySQL,Oracle,MS SqlServer,DB2,sybase等…</p>
<h3 id="SQL-结构化查询语言">SQL:结构化查询语言</h3>
<p>程序员需要学习SQL语言，编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</p>
<h2 id="mysql基本操作">mysql基本操作:</h2>
<p>启动和关闭mysql服务:<br>
 net start mysql; 启动<br>
 net stop mysql; 关闭<br>
退出:<br>
 exit<br>
登录:<br>
 mysql -uroot -p密码</p>
<p>查看mysql有哪些数据库<br>
show databases;</p>
<p>查看数据库中有哪些表<br>
show tables;</p>
<p>查看数据库的版本号<br>
select version</p>
<h3 id="SQL语句的分类">SQL语句的分类</h3>
<p>SQL语句有很多，最好进行分类，容易记住<br>
 DQL:Data Definition Languages(数据查询语言)<br>
        select…<br>
 DML:Data Manipulation Language(数据查询)<br>
       insert delete update<br>
 DDL:Data Data Definition Languages(数据操纵语句)<br>
       create, drop, alter<br>
 TCL:Transaction Control Language(事务控制语句)<br>
       commit, rollback<br>
  DCL:Data Control Language(数据控制语言)<br>
       授权grant, 撤销revoke…</p>
<h3 id="简单查询">简单查询</h3>
<p>查看表中所有数据:<br>
select * from 表名</p>
<p>不看表名，只看结构:<br>
desc 表名;</p>
<p>查询一个字段:<br>
select 字段名 from 表名;<br>
多个字段名中间用逗号隔开:select 字段名,字段名 from 表名</p>
<p>给查询的列起别名:<br>
select 字段名 as 别名 from 表名;</p>
<p>条件查询:<br>
select 字段名 from 表名 where 条件;</p>
<p>条件<br>
= 等于<br>
&lt;&gt;或!= 不等于<br>
&lt; 小于 &gt; 大于<br>
between … and …或&gt;= and &lt;= 表示两值之间<br>
is null为null<br>
in 表示包含where job in(‘SALE’)<br>
like 表示模糊查询<br>
名字以T结尾like ‘%T’<br>
名字以K开始like ‘K%’<br>
第三个字母是R的like ‘__R%’</p>
<h3 id="排序">排序</h3>
<p>select 字段名 from 表名 order by 字段名;默认是升序<br>
select 字段名 from 表名 order by 字段名 desc;表示降序（asc为升序)</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库(增删查改)</tag>
      </tags>
  </entry>
</search>
